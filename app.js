// Generated by LiveScript 1.2.0
var app;
app = {
  storage: {
    get: function(){
      return JSON.parse(localStorage.getItem('mithril')) || [];
    },
    set: function(list){
      localStorage.setItem('mithril', JSON.stringify(list));
    }
  },
  controller: function(){
    var this$ = this;
    this.list = _.map(function(it){
      return new app.Item(it);
    })(
    app.storage.get());
    this.allCompleted = m.prop(false);
    this.title = m.prop('');
    this.title.redraw = false;
    this.filter = m.route.param('filter');
    this.create = function(){
      var title;
      title = this$.title().trim();
      if (title) {
        this$.list.push(new app.Item({
          title: title
        }));
        this$.title('');
      }
    };
    this.remove = function(item){
      this$.list.splice(this$.list.indexOf(item), 1);
    };
    this.edit = function(item){
      item.bufferedTitle = m.prop(item.title());
      item.bufferedTitle.redraw = false;
      item.editing(true);
    };
    this.doneEditing = function(item){
      if (!item.editing()) {
        return;
      }
      item.editing(false);
      item.title(item.bufferedTitle().trim());
      if (!item.title()) {
        this$.list.splice(this$.list.indexOf(item), 1);
      }
    };
    this.cancelEditing = function(item){
      item.editing(false);
    };
    this.completeAll = function(){
      var i$, ref$, len$, item;
      for (i$ = 0, len$ = (ref$ = this$.list).length; i$ < len$; ++i$) {
        item = ref$[i$];
        item.completed(!this$.allCompleted());
      }
    };
    this.clearCompleted = function(){
      this$.list = _.reject(function(it){
        return it.completed();
      })(
      this$.list);
    };
    this.update = function(){
      this$.completed = _.filter(function(it){
        return it.completed();
      })(
      this$.list);
      this$.active = _.reject(function(it){
        return it.completed();
      })(
      this$.list);
      this$.filtered = (function(){
        switch (this.filter) {
        case 'active':
          return this.active;
        case 'completed':
          return this.completed;
        default:
          return this.list;
        }
      }.call(this$));
      this$.allCompleted(this$.completed.length === this$.list.length);
      app.storage.set(this$.list);
    };
    this.handleEscape = function(it){
      if (it.keyCode === 27) {
        document.getElementById('new-todo').select();
      }
    };
    this.onunload = function(){
      document.removeEventListener('keyup', this$.handleEscape);
    };
    document.addEventListener('keyup', this.handleEscape);
  },
  view: function(ctrl){
    ctrl.update();
    return a(m('header#header', a(m('h1', 'todos'), m('input#new-todo', {
      placeholder: 'What needs to be done?',
      onenter: ctrl.create,
      value: ctrl.title,
      autofocus: true
    }))), ctrl.list.length ? a(m('section#main', a(m('input#toggle-all[type=checkbox]', {
      onclick: ctrl.completeAll,
      checked: ctrl.allCompleted()
    }), m('ul#todo-list', a(ctrl.filtered.map(function(item){
      return m('li', {
        key: item.key,
        'class': {
          completed: item.completed(),
          editing: item.editing()
        }
      }, a(m('.view', a(m('input.toggle[type=checkbox]', {
        checked: item.completed
      }), m('label', {
        ondblclick: function(){
          return ctrl.edit(item);
        }
      }, item.title()), m('button.destroy', {
        onclick: function(){
          return ctrl.remove(item);
        }
      }))), item.editing() ? m('input.edit', {
        value: item.bufferedTitle,
        onenter: function(){
          return ctrl.doneEditing(item);
        },
        onescape: function(){
          return ctrl.cancelEditing(item);
        },
        onblur: function(){
          return ctrl.doneEditing(item);
        },
        config: configInit(function(it){
          it.select();
        })
      }) : void 8));
    }))))), m('footer#footer', a(m('span#todo-count', a(m('strong', ctrl.active.length + " item" + (ctrl.active.length === 1 ? '' : 's') + " left"))), m('ul#filters', a(m('li', m('a', {
      href: '/',
      config: m.route,
      'class': {
        selected: !ctrl.filter
      }
    }, 'All')), m('li', m('a', {
      href: '/active',
      config: m.route,
      'class': {
        selected: ctrl.filter === 'active'
      }
    }, 'Active')), m('li', m('a', {
      href: '/completed',
      config: m.route,
      'class': {
        selected: ctrl.filter === 'completed'
      }
    }, 'Completed')))), ctrl.completed.length ? m('button#clear-completed', {
      onclick: ctrl.clearCompleted
    }, "Clear completed (" + ctrl.completed.length + ")") : void 8))) : void 8);
  }
};
app.Item = (function(){
  Item.displayName = 'Item';
  var prototype = Item.prototype, constructor = Item;
  function Item(o){
    this.key = _.rand(Number.MAX_VALUE);
    this.title = m.prop(o.title || '');
    this.completed = m.prop(o.completed || false);
    this.editing = m.prop(o.editing || false);
  }
  return Item;
}());
m.route.mode = 'hash';
m.route(document.getElementById('todoapp'), '/', {
  '/': app,
  '/:filter': app
});